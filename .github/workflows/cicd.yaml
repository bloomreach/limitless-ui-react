name: CI/CD
run-name: ${{github.workflow}} (${{github.event_name}} on ${{ github.ref_name}})

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      do_release:
        type: boolean
        default: false
        description: Do a release
      dry_run:
        type: boolean
        default: false
        description: Do a dry-run of the release

concurrency:
  group: 'cicd'
  cancel-in-progress: false

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  sync_readme:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Limitless UI markdown pages to Readme
        uses: readmeio/rdme@v8
        with:
          rdme: docs ./readme --key=${{ secrets.RDME_API_KEY }} --version=${{ vars.DOCS_VERSION }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: pnpm commitlint --last --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run:
          pnpm commitlint --from ${{ github.event.pull_request.head.sha }}~${{
          github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }}
          --verbose

      - name: Lint source code
        run: pnpm lint

      - name: Build-time source code type check
        run: pnpm type-check

      - name: Run unit & integration test
        run: pnpm test

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          path: coverage
          name: coverage
          retention-days: 30
          overwrite: true

      - name: Build distribution assets
        run: pnpm build

      - name: Cache build assets
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          path: dist
          name: assets
          retention-days: 30
          overwrite: true

  e2e:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Download build assets
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: dist

      - name: Run tests
        run: pnpm e2e

      - name: Upload e2e artifacts
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          overwrite: true

  release:
    if:
      ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.do_release == 'true'  &&
      success()}}
    runs-on: ubuntu-latest
    needs: [build, e2e]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Restore build assets
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Audit production dependencies
        run: pnpm audit --prod --audit-level high

      - name: Install dependencies
        run: pnpm install

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm exec semantic-release -d ${{ github.event.inputs.dry_run }}

  storybook:
    needs: [release]
    if:
      ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' &&
      needs.release.result == 'success' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Build the TSDoc
        run: pnpm storybook:build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './storybook-static'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
